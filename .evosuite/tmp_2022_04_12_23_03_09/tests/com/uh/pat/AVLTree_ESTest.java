/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 13 04:04:57 GMT 2022
 */

package com.uh.pat;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.uh.pat.AVLTree;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AVLTree_ESTest extends AVLTree_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.delete(330);
      assertEquals((-1), aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertEquals((-1), aVLTree0.height());
      assertNull(aVLTree_Node0);
      
      int int0 = aVLTree0.getBalance((AVLTree.Node) null);
      assertEquals((-1), aVLTree0.height());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.delete(0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(2401);
      assertEquals(0, aVLTree0.height());
      
      int int0 = aVLTree0.height();
      assertEquals(0, aVLTree0.height());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      int int0 = (-1634);
      aVLTree0.delete((-1634));
      assertEquals((-1), aVLTree0.height());
      
      int int1 = aVLTree0.height();
      assertEquals((-1), aVLTree0.height());
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      aVLTree0.delete(0);
      assertEquals((-1), aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.find((-1));
      assertEquals((-1), aVLTree0.height());
      assertNull(aVLTree_Node0);
      
      aVLTree0.delete((-1634));
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert((-1));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete((-1634));
      assertEquals(0, aVLTree0.height());
      
      int int2 = 0;
      aVLTree0.delete(0);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete(1273);
      assertEquals(0, aVLTree0.height());
      
      int int3 = 0;
      aVLTree0.insert(0);
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.find(0);
      assertEquals(1, aVLTree0.height());
      assertNotNull(aVLTree_Node1);
      
      AVLTree.Node aVLTree_Node2 = aVLTree0.find(0);
      assertEquals(1, aVLTree0.height());
      assertNotNull(aVLTree_Node2);
      assertSame(aVLTree_Node2, aVLTree_Node1);
      
      aVLTree_Node1.height = 1;
      assertEquals(1, aVLTree0.height());
      
      // Undeclared exception!
      try { 
        aVLTree0.delete((-987));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.uh.pat.AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertEquals((-1), aVLTree0.height());
      assertNull(aVLTree_Node0);
      
      int int0 = aVLTree0.getBalance((AVLTree.Node) null);
      assertEquals((-1), aVLTree0.height());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.insert((-3126));
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertEquals(0, aVLTree0.height());
      assertNotNull(aVLTree_Node0);
      
      aVLTree_Node0.height = (-3126);
      assertEquals((-3126), aVLTree0.height());
      
      int int0 = aVLTree0.getBalance(aVLTree_Node0);
      assertEquals((-3126), aVLTree0.height());
      assertEquals(0, int0);
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.find((-3126));
      assertEquals((-3126), aVLTree0.height());
      assertNotNull(aVLTree_Node1);
      assertSame(aVLTree_Node1, aVLTree_Node0);
      
      int int1 = 0;
      aVLTree_Node1.key = 0;
      assertEquals((-3126), aVLTree0.height());
      
      AVLTree aVLTree1 = new AVLTree();
      assertEquals((-1), aVLTree1.height());
      assertFalse(aVLTree1.equals((Object)aVLTree0));
      assertNotNull(aVLTree1);
      
      AVLTree.Node aVLTree_Node2 = aVLTree1.new Node((-3126));
      assertEquals((-1), aVLTree1.height());
      assertFalse(aVLTree1.equals((Object)aVLTree0));
      assertFalse(aVLTree_Node2.equals((Object)aVLTree_Node0));
      assertFalse(aVLTree_Node2.equals((Object)aVLTree_Node1));
      assertNotNull(aVLTree_Node2);
      
      aVLTree_Node1.right = aVLTree_Node2;
      assertEquals((-3126), aVLTree0.height());
      assertEquals((-1), aVLTree1.height());
      
      aVLTree_Node2.height = (-3126);
      assertEquals((-1), aVLTree1.height());
      
      int int2 = 1;
      aVLTree_Node1.key = 1;
      assertEquals((-3126), aVLTree0.height());
      
      int int3 = aVLTree0.getBalance(aVLTree_Node1);
      assertEquals((-3126), aVLTree0.height());
      assertEquals((-3125), int3);
      assertFalse(aVLTree0.equals((Object)aVLTree1));
      assertFalse(aVLTree_Node1.equals((Object)aVLTree_Node2));
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertNotSame(aVLTree0, aVLTree1);
      assertNotSame(aVLTree_Node1, aVLTree_Node2);
      assertSame(aVLTree_Node1, aVLTree_Node0);
      
      int int4 = aVLTree0.getBalance(aVLTree_Node1);
      assertEquals((-3126), aVLTree0.height());
      assertEquals((-3125), int4);
      assertFalse(aVLTree0.equals((Object)aVLTree1));
      assertFalse(aVLTree_Node1.equals((Object)aVLTree_Node2));
      assertTrue(int4 == int3);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertNotSame(aVLTree0, aVLTree1);
      assertNotSame(aVLTree_Node1, aVLTree_Node2);
      assertSame(aVLTree_Node1, aVLTree_Node0);
      
      int int5 = (-1059);
      aVLTree_Node0.height = (-1059);
      assertEquals((-1059), aVLTree0.height());
      
      // Undeclared exception!
      try { 
        aVLTree0.insert(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.uh.pat.AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      int int0 = 0;
      aVLTree0.insert(0);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete(1);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(1);
      assertEquals(0, aVLTree0.height());
      
      int int1 = 0;
      aVLTree0.insert(0);
      assertEquals(1, aVLTree0.height());
      
      int int2 = 0;
      aVLTree0.delete(0);
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(0);
      assertEquals(0, aVLTree0.height());
      assertNull(aVLTree_Node0);
      
      aVLTree0.delete((-748));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete(547);
      assertEquals(1, aVLTree0.height());
      
      // Undeclared exception!
      try { 
        aVLTree0.insert(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("com.uh.pat.AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      int int0 = 0;
      aVLTree0.delete(0);
      assertEquals((-1), aVLTree0.height());
      
      int int1 = 0;
      aVLTree0.insert(0);
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertEquals(0, aVLTree0.height());
      assertNotNull(aVLTree_Node0);
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      assertEquals(0, aVLTree0.height());
      assertNotNull(aVLTree_Node1);
      assertSame(aVLTree_Node1, aVLTree_Node0);
      
      aVLTree_Node1.right = aVLTree_Node0;
      assertEquals(0, aVLTree0.height());
      
      int int2 = aVLTree0.getBalance(aVLTree_Node1);
      assertEquals(0, aVLTree0.height());
      assertEquals(1, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertSame(aVLTree_Node1, aVLTree_Node0);
      
      // Undeclared exception!
      aVLTree0.find(1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.delete(3879);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(3879);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert((-3709));
      assertEquals(1, aVLTree0.height());
      
      int int0 = 0;
      aVLTree0.insert(0);
      assertEquals(1, aVLTree0.height());
      
      // Undeclared exception!
      try { 
        aVLTree0.insert(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("com.uh.pat.AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.insert(0);
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node(0);
      assertEquals(0, aVLTree0.height());
      assertNotNull(aVLTree_Node0);
      
      // Undeclared exception!
      try { 
        aVLTree0.insert(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("com.uh.pat.AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.insert((-871));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert(2416);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert((-601));
      assertEquals(1, aVLTree0.height());
      
      int int0 = aVLTree0.height();
      assertEquals(1, aVLTree0.height());
      assertEquals(1, int0);
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.find((-137));
      assertEquals(1, aVLTree0.height());
      assertNull(aVLTree_Node0);
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.find(1);
      assertEquals(1, aVLTree0.height());
      assertNull(aVLTree_Node1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.insert(1759);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete(1759);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(1759);
      assertEquals(0, aVLTree0.height());
      
      int int0 = (-1);
      aVLTree0.insert((-1));
      assertEquals(1, aVLTree0.height());
      
      int int1 = 0;
      aVLTree0.delete(0);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete(4104);
      assertEquals(1, aVLTree0.height());
      
      int int2 = aVLTree0.height();
      assertEquals(1, aVLTree0.height());
      assertEquals(1, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      aVLTree0.insert(3683);
      assertEquals(1, aVLTree0.height());
      
      int int3 = aVLTree0.height();
      assertEquals(1, aVLTree0.height());
      assertEquals(1, int3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertEquals(1, aVLTree0.height());
      assertNotNull(aVLTree_Node0);
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      assertEquals(1, aVLTree0.height());
      assertNotNull(aVLTree_Node1);
      assertSame(aVLTree_Node1, aVLTree_Node0);
      
      aVLTree_Node1.height = 0;
      assertEquals(0, aVLTree0.height());
      
      aVLTree_Node0.left = aVLTree_Node1;
      assertEquals(0, aVLTree0.height());
      
      aVLTree_Node1.left = aVLTree_Node0.left;
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node2 = aVLTree_Node0.right;
      assertFalse(aVLTree_Node2.equals((Object)aVLTree_Node1));
      assertFalse(aVLTree_Node2.equals((Object)aVLTree_Node0));
      assertNotNull(aVLTree_Node2);
      assertNotSame(aVLTree_Node2, aVLTree_Node1);
      assertNotSame(aVLTree_Node2, aVLTree_Node0);
      
      aVLTree_Node0.left.left = aVLTree_Node1.left;
      assertEquals(0, aVLTree0.height());
      
      aVLTree_Node2.left = aVLTree_Node0;
      assertEquals(0, aVLTree0.height());
      
      int int4 = aVLTree0.getBalance(aVLTree_Node2);
      assertEquals(0, aVLTree0.height());
      assertEquals((-1), int4);
      assertFalse(aVLTree_Node2.equals((Object)aVLTree_Node1));
      assertFalse(aVLTree_Node2.equals((Object)aVLTree_Node0));
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertTrue(int4 == int0);
      assertFalse(int4 == int1);
      assertFalse(aVLTree_Node0.equals((Object)aVLTree_Node2));
      assertNotSame(aVLTree_Node2, aVLTree_Node1);
      assertNotSame(aVLTree_Node2, aVLTree_Node0);
      assertNotSame(aVLTree_Node0, aVLTree_Node2);
      assertSame(aVLTree_Node0, aVLTree_Node1);
      
      // Undeclared exception!
      aVLTree0.delete(1759);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      int int0 = (-679);
      aVLTree0.delete((-679));
      assertEquals((-1), aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertEquals((-1), aVLTree0.height());
      assertNull(aVLTree_Node0);
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.find((-679));
      assertEquals((-1), aVLTree0.height());
      assertNull(aVLTree_Node1);
      
      aVLTree0.insert(1);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete(1);
      assertEquals((-1), aVLTree0.height());
      
      int int1 = aVLTree0.height();
      assertEquals((-1), aVLTree0.height());
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      aVLTree0.insert(0);
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node2 = aVLTree0.find(0);
      assertEquals(0, aVLTree0.height());
      assertNotNull(aVLTree_Node2);
      
      AVLTree.Node aVLTree_Node3 = aVLTree0.getRoot();
      assertEquals(0, aVLTree0.height());
      assertNotNull(aVLTree_Node3);
      assertSame(aVLTree_Node3, aVLTree_Node2);
      
      aVLTree_Node2.left = aVLTree_Node3;
      assertEquals(0, aVLTree0.height());
      
      int int2 = 0;
      // Undeclared exception!
      try { 
        aVLTree0.delete(int0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.insert(0);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert(1);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert(4034);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete(554);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert(1849);
      assertEquals(2, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertEquals(2, aVLTree0.height());
      assertNotNull(aVLTree_Node0);
      
      int int0 = aVLTree0.height();
      assertEquals(2, aVLTree0.height());
      assertEquals(2, int0);
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.new Node((-382));
      assertEquals(2, aVLTree0.height());
      assertFalse(aVLTree_Node1.equals((Object)aVLTree_Node0));
      assertNotNull(aVLTree_Node1);
      
      aVLTree_Node0.left = aVLTree_Node1;
      assertEquals(2, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node2 = aVLTree0.find(1);
      assertEquals(2, aVLTree0.height());
      assertFalse(aVLTree_Node2.equals((Object)aVLTree_Node1));
      assertNotNull(aVLTree_Node2);
      assertNotSame(aVLTree_Node2, aVLTree_Node1);
      assertSame(aVLTree_Node2, aVLTree_Node0);
      
      int int1 = aVLTree0.height();
      assertEquals(2, aVLTree0.height());
      assertEquals(2, int1);
      assertTrue(int1 == int0);
      
      aVLTree_Node1.left = aVLTree_Node0;
      assertEquals(2, aVLTree0.height());
      
      aVLTree0.delete(1);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete(673);
      assertEquals(5, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node3 = aVLTree0.getRoot();
      assertEquals(5, aVLTree0.height());
      assertFalse(aVLTree_Node3.equals((Object)aVLTree_Node1));
      assertNotNull(aVLTree_Node3);
      assertSame(aVLTree_Node3, aVLTree_Node2);
      assertNotSame(aVLTree_Node3, aVLTree_Node1);
      assertSame(aVLTree_Node3, aVLTree_Node0);
      
      aVLTree0.delete((-1650));
      assertEquals(8, aVLTree0.height());
      
      int int2 = aVLTree0.getBalance(aVLTree_Node0);
      assertEquals(8, aVLTree0.height());
      assertEquals((-7), int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(aVLTree_Node0.equals((Object)aVLTree_Node1));
      assertNotSame(aVLTree_Node0, aVLTree_Node1);
      assertSame(aVLTree_Node0, aVLTree_Node3);
      assertSame(aVLTree_Node0, aVLTree_Node2);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.delete(0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.delete((-3138));
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete((-2200));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert((-2464));
      assertEquals(1, aVLTree0.height());
      
      // Undeclared exception!
      try { 
        aVLTree0.delete(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.uh.pat.AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.insert(287);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert((-1));
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertEquals(1, aVLTree0.height());
      assertNotNull(aVLTree_Node0);
      
      aVLTree0.delete((-1));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert(3038);
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.delete((-423));
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert((-9));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete((-1774));
      assertEquals(0, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.insert((-3571));
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node(0);
      assertEquals(0, aVLTree0.height());
      assertNotNull(aVLTree_Node0);
      
      aVLTree0.delete(0);
      assertEquals(0, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.insert(4086);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert((-3888));
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(1);
      assertEquals(1, aVLTree0.height());
      assertNull(aVLTree_Node0);
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.find(4086);
      assertEquals(1, aVLTree0.height());
      assertNotNull(aVLTree_Node1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.insert(822);
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(1486);
      assertEquals(0, aVLTree0.height());
      assertNull(aVLTree_Node0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.find((-101));
      assertEquals((-1), aVLTree0.height());
      assertNull(aVLTree_Node0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      int int0 = aVLTree0.height();
      assertEquals((-1), aVLTree0.height());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.insert(0);
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(1);
      assertEquals(0, aVLTree0.height());
      assertNull(aVLTree_Node0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      int int0 = 0;
      aVLTree0.insert(0);
      assertEquals(0, aVLTree0.height());
      
      // Undeclared exception!
      try { 
        aVLTree0.insert(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("com.uh.pat.AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.delete(3173);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert((-2492));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert((-21));
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert(3173);
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertEquals(1, aVLTree0.height());
      assertNotNull(aVLTree_Node0);
      
      aVLTree0.delete(3173);
      assertEquals(1, aVLTree0.height());
      
      aVLTree_Node0.height = (-2492);
      assertEquals((-2492), aVLTree0.height());
      
      aVLTree_Node0.height = (-1);
      assertEquals((-1), aVLTree0.height());
      
      AVLTree.Node aVLTree_Node1 = aVLTree_Node0.right;
      assertNull(aVLTree_Node1);
      
      aVLTree_Node0.left = null;
      assertEquals((-1), aVLTree0.height());
      
      aVLTree_Node0.key = 3173;
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.delete(3173);
      assertEquals((-1), aVLTree0.height());
      
      int int0 = aVLTree0.getBalance(aVLTree_Node0);
      assertEquals((-1), aVLTree0.height());
      assertEquals(0, int0);
      
      aVLTree0.insert((-518));
      assertEquals(0, aVLTree0.height());
      
      int int1 = aVLTree0.height();
      assertEquals(0, aVLTree0.height());
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      aVLTree0.insert(2928);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert((-21));
      assertEquals(1, aVLTree0.height());
      
      int int2 = aVLTree0.height();
      assertEquals(1, aVLTree0.height());
      assertEquals(1, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      int int3 = aVLTree0.height();
      assertEquals(1, aVLTree0.height());
      assertEquals(1, int3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      
      AVLTree.Node aVLTree_Node2 = aVLTree0.find(3173);
      assertEquals(1, aVLTree0.height());
      assertNull(aVLTree_Node2);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(3526);
      aVLTree0.find(1777);
      aVLTree0.delete(1376);
      aVLTree0.delete(357);
      aVLTree0.insert(1376);
      aVLTree0.insert(343);
      aVLTree0.insert(1777);
      aVLTree0.delete(1376);
      aVLTree0.delete(1777);
      aVLTree0.insert(357);
      aVLTree0.find(1777);
      aVLTree0.find(3526);
      aVLTree0.find((-2143));
      aVLTree0.insert((-1));
      int int0 = 959;
      // Undeclared exception!
      try { 
        aVLTree0.insert(3526);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("com.uh.pat.AVLTree", e);
      }
  }
}
